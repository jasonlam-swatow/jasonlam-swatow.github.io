{"version":3,"sources":["webpack:///path---posts-react-hooks-fa8a9d1350efd452ceea.js","webpack:///./.cache/json/posts-react-hooks.json"],"names":["webpackJsonp","409","module","exports","data","site","siteMetadata","title","subtitle","author","name","twitter","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,SAAA,UAAAC,QAAmDC,KAAA,YAAAC,QAAA,gBAA4CC,gBAAA,GAAAC,IAAA,8BAAyDC,gBAAmBC,GAAA,+HAAAC,KAAA;AAAg4wCC,QAA2DC,UAAA,8BAAyCC,aAAgBZ,MAAA,iBAAAa,MAAA,eAAAC,KAAA,2BAAAC,YAAA,4EAA2KC,aAAgBC,KAAA","file":"path---posts-react-hooks-fa8a9d1350efd452ceea.js","sourcesContent":["webpackJsonp([13068826380790],{\n\n/***/ 409:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"author\":{\"name\":\"Jason Lam\",\"twitter\":\"jasonlam0619\"},\"disqusShortname\":\"\",\"url\":\"https://lumen.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/mac/jasonlam-swatow.github.io/src/pages/articles/2018-10-27---React-Hooks/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。</p>\\n<h2>背景介紹</h2>\\n<p>隨著 React 應用長期擴展和維護，終會引致以下所謂「unconnected」問題，而 Hooks 因應而生：</p>\\n<ul>\\n<li><strong>難以復用組件間的富狀態邏輯</strong>：React 無法為組件連結可復用的行為。Render props 和 HOC 是解決之道，但你需要重構代碼以使用之。Hooks 便是 React 所亟需的、一個用以共享富狀態（stateful）邏輯的原生手段。</li>\\n<li><strong>複雜組件變得難以理解</strong>：互有關聯的邏輯分散支離於不同生命週期，而同一生命週期又充斥著互無關聯的代碼。Hooks 能讓一組件基於關係地分割成小函式（譬如基於抓取數據一塊），你或可使用一 reducer 來使組件本地 state 更加可預測。</li>\\n<li><strong>令人困惑的 class</strong>：囿於 JavaScript 本身特性，class 組件常令人困惑，尤其是涉及對class 組件或函式組件的選擇時。Class 組件對機器層面亦有影響，譬如難以 minify、使熱加載變慢或不穩定，還會影響極有潛力的 <a href=\\\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\\\">ahead-of-time compilation</a> 的速度。Hooks 擁抱函式，能在沒有 class 的情況下，充分利用 React 特性。</li>\\n</ul>\\n<p>React 不鼓勵開發者急於改寫現有代碼，而是逐漸轉換思想，即「thinking in Hooks」。Hooks 能覆蓋 class 的所有使用場景，但仍會保留 class。</p>\\n<h2>Hooks 用法</h2>\\n<p>以下代碼示例片段，默認發生於此函式之內：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> useState<span class=\\\"token punctuation\\\">,</span> useEffect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>State Hooks</h3>\\n<p><code class=\\\"language-text\\\">useState</code> 是一個 Hook。在函式組件內調用它（傳參為初始 state 值），會返回新增的本地 state、以及用以更新該 state 的函式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 初始值為 0 的新 state，返回該 state 和更新函式</span></code></pre>\\n      </div>\\n<p>上例之 <code class=\\\"language-text\\\">setCount</code> 和 class 裏的 <code class=\\\"language-text\\\">this.setState</code> 相似，除了它<strong>不合併新舊 state，而是直接替代</strong>——此即為 Hooks 的初衷，即提倡基於哪些 state 會一道改變來分割 state（並因之分割 Hooks），故直接替代 state 值而非合併一龐雜的 state 對象。</p>\\n<h3>Effect Hooks</h3>\\n<p>諸如抓取數據、訂閱和手動操作 DOM 這些行為，皆是「副作用」（簡稱「effects」）。我們通常想副作用發生於 React 更新 DOM 之後，譬如把基於 state 的 DOM 手動操作放在 <code class=\\\"language-text\\\">componentDidMount</code> 和 <code class=\\\"language-text\\\">componentDidUpdate</code> 生命週期中，而這導致重複代碼。<code class=\\\"language-text\\\">useEffect</code> 此一 Hook，發揮並結合了 class 裏的各生命週期的用處，能在函式組件發生渲染之後執行副作用。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>副作用還能透過返回一個函式，以指定 React 於組件卸載時「清理」之：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h4>Effects 實踐貼士</h4>\\n<p>在一函式組件內結合調用多個 <code class=\\\"language-text\\\">useState</code> 和 <code class=\\\"language-text\\\">useEffect</code>，將無關的邏輯分離至多個代碼塊：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>isOnline<span class=\\\"token punctuation\\\">,</span> setIsOnline<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useEffect</code> 在每次重渲染時都觸發的原因是：在 class 組件中，使用到 props 的副作用在 props 變動時會引致 bug，除非正確引入 <code class=\\\"language-text\\\">componentDidUpdate</code>（which is 一常見的 bug 來源）以監測 props。</p>\\n<p>為優化性能，可擇機取消重渲染後觸發 <code class=\\\"language-text\\\">useEffect</code>。不同於 <code class=\\\"language-text\\\">componentDidUpdate</code> 中比對 <code class=\\\"language-text\\\">prevProps</code> 參數和當前 props（或 <code class=\\\"language-text\\\">prevState</code> 和當前 state），<code class=\\\"language-text\\\">useEffect</code> 內建可選的第二個參數：包含 state 名的數組，於是僅在該 state 變化時才重跑 effect。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>Hooks 之規則</h3>\\n<ul>\\n<li>只在<strong>頂層</strong>調用 Hooks。勿在循環、條件或嵌套函式內調用。</li>\\n<li>只在 React 函式組件內調用 Hooks。勿在常規 JavaScript 函式內調用（除了 custom Hooks，後文將述及）。</li>\\n</ul>\\n<p>官方提供一 <a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-Hooks\\\">eslint-plugin-react-hooks</a> 來確保這些規則。</p>\\n<h3>Custom Hooks</h3>\\n<p>自訂 Hooks 讓你能復用富狀態邏輯，而不似 render props 和 HOC 那般徒增新組件。</p>\\n<p>將訂閱好友在線狀態的邏輯抽取出來成為一自訂 Hook：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>friendID<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>isOnline<span class=\\\"token punctuation\\\">,</span> setIsOnline<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleStatusChange</span><span class=\\\"token punctuation\\\">(</span>status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setIsOnline</span><span class=\\\"token punctuation\\\">(</span>status<span class=\\\"token punctuation\\\">.</span>isOnline<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>friendID<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* unsubscribe */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> isOnline<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>然後就可在多個組件中使用之：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">FriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> isOnline <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isOnline <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Loading...'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> isOnline <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'Online'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Offline'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">FriendListItem</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> isOnline <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>li style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> isOnline <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'green'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>須知自訂 Hooks 只復用邏輯而非 state，調用者仍有完全孤立的 state。自訂 Hooks 更似一個自然流露的 convention 而非 feature，若一個函式以「<code class=\\\"language-text\\\">use</code>」冠名並其內部調用了其他 Hooks，則為一自訂 Hook。諸如表單處理、動畫、訂閱聲明、定時器等行為，皆可利用自訂 Hooks。</p>\\n<h3>其他 Hooks</h3>\\n<h4><code class=\\\"language-text\\\">useContext</code></h4>\\n<p>此 Hook 讓你毋須引入嵌套即可訂閱 React context：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> locale <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>LocaleContext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> theme <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>ThemeContext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>開發者通常不樂意手動地在組件樹中層層傳遞回調函式。可以結合 <code class=\\\"language-text\\\">useReducer</code>（下文會述及）和 context 來往下傳遞一 <code class=\\\"language-text\\\">dispatch</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> TodosDispatch <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TodosApp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Tip: `dispatch` won't change between re-renders</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>todos<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>todosReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>TodosDispatch<span class=\\\"token punctuation\\\">.</span>Provider value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>dispatch<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>DeepTree todos<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>todos<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>TodosDispatch<span class=\\\"token punctuation\\\">.</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">TodosApp</code> 內的任意子裔都可以讀取使用 <code class=\\\"language-text\\\">dispatch</code> 函數並發起 actions 至 <code class=\\\"language-text\\\">TodosApp</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">DeepChild</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 從 context 處取用 dispatch 來執行 action</span>\\n  <span class=\\\"token keyword\\\">const</span> dispatch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>TodosDispatch<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Add todo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useReducer</code></h4>\\n<p>此 Hook 是 <code class=\\\"language-text\\\">useState</code> 的替代，可用一 reducer 管理複雜組件的本地 state。它接收一 reducer 和一可選的 <code class=\\\"language-text\\\">initialState</code>，返回當前 state 併以一 <code class=\\\"language-text\\\">dispatch</code> 方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'reset'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> initialState<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> initialCount <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>reducer<span class=\\\"token punctuation\\\">,</span> initialState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      Count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>state<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'reset'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        Reset\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useMemo</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> memoizedValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">computeExpensiveValue</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>返回一個記憶化的（memoized）值。只會在輸入參數時發生改變時觸發重計算，避免每次渲染後的計算開銷。</p>\\n<p><code class=\\\"language-text\\\">useMemo</code> 甚至可用來跳過對子組件的重渲染：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 僅當 `a` 變化時重渲染：</span>\\n  <span class=\\\"token keyword\\\">const</span> child1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>Child1 a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 僅當 `b` 變化時重渲染：</span>\\n  <span class=\\\"token keyword\\\">const</span> child2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>Child2 b<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>b<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>child1<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">{</span>child2<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useCallback</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> memoizedCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>返回一個記憶化的回調函式，它只會在輸入參數發生改變時觸發。引用比較的子組件會引致不必要的渲染，<code class=\\\"language-text\\\">useCallback</code> 即能用於優化此情境（類似 <code class=\\\"language-text\\\">shouldComponentUpdate</code>）。</p>\\n<h4><code class=\\\"language-text\\\">useRef</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TextInputWithFocusButton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> inputEl <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">onButtonClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// `current` 指向加載的輸入框元素</span>\\n    inputEl<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>input ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>inputEl<span class=\\\"token punctuation\\\">}</span> type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"text\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onButtonClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Focus the input<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>一個小技巧：<code class=\\\"language-text\\\">useRef</code> 可用以保存實例變量，因為「ref」對象是一個通用的容器，而其 <code class=\\\"language-text\\\">current</code> 成員是可變的（mutable）並能貯存任意值，類似 class 的實例變量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> intervalRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    intervalRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleCancelClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>完 :)</p>\",\"fields\":{\"tagSlugs\":[\"/tags/react/\",\"/tags/大前端/\"]},\"frontmatter\":{\"title\":\"重磅：React Hooks\",\"tags\":[\"React\",\"大前端\"],\"date\":\"2018-10-27T22:40:32.169Z\",\"description\":\"React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。本文詳盡地介紹了 Hooks 的誕生背景、使用方法與情境。\"}}},\"pathContext\":{\"slug\":\"/posts/react-hooks/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-react-hooks-fa8a9d1350efd452ceea.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"author\":{\"name\":\"Jason Lam\",\"twitter\":\"jasonlam0619\"},\"disqusShortname\":\"\",\"url\":\"https://lumen.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/mac/jasonlam-swatow.github.io/src/pages/articles/2018-10-27---React-Hooks/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。</p>\\n<h2>背景介紹</h2>\\n<p>隨著 React 應用長期擴展和維護，終會引致以下所謂「unconnected」問題，而 Hooks 因應而生：</p>\\n<ul>\\n<li><strong>難以復用組件間的富狀態邏輯</strong>：React 無法為組件連結可復用的行為。Render props 和 HOC 是解決之道，但你需要重構代碼以使用之。Hooks 便是 React 所亟需的、一個用以共享富狀態（stateful）邏輯的原生手段。</li>\\n<li><strong>複雜組件變得難以理解</strong>：互有關聯的邏輯分散支離於不同生命週期，而同一生命週期又充斥著互無關聯的代碼。Hooks 能讓一組件基於關係地分割成小函式（譬如基於抓取數據一塊），你或可使用一 reducer 來使組件本地 state 更加可預測。</li>\\n<li><strong>令人困惑的 class</strong>：囿於 JavaScript 本身特性，class 組件常令人困惑，尤其是涉及對class 組件或函式組件的選擇時。Class 組件對機器層面亦有影響，譬如難以 minify、使熱加載變慢或不穩定，還會影響極有潛力的 <a href=\\\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\\\">ahead-of-time compilation</a> 的速度。Hooks 擁抱函式，能在沒有 class 的情況下，充分利用 React 特性。</li>\\n</ul>\\n<p>React 不鼓勵開發者急於改寫現有代碼，而是逐漸轉換思想，即「thinking in Hooks」。Hooks 能覆蓋 class 的所有使用場景，但仍會保留 class。</p>\\n<h2>Hooks 用法</h2>\\n<p>以下代碼示例片段，默認發生於此函式之內：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> useState<span class=\\\"token punctuation\\\">,</span> useEffect <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'react'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>State Hooks</h3>\\n<p><code class=\\\"language-text\\\">useState</code> 是一個 Hook。在函式組件內調用它（傳參為初始 state 值），會返回新增的本地 state、以及用以更新該 state 的函式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// 初始值為 0 的新 state，返回該 state 和更新函式</span></code></pre>\\n      </div>\\n<p>上例之 <code class=\\\"language-text\\\">setCount</code> 和 class 裏的 <code class=\\\"language-text\\\">this.setState</code> 相似，除了它<strong>不合併新舊 state，而是直接替代</strong>——此即為 Hooks 的初衷，即提倡基於哪些 state 會一道改變來分割 state（並因之分割 Hooks），故直接替代 state 值而非合併一龐雜的 state 對象。</p>\\n<h3>Effect Hooks</h3>\\n<p>諸如抓取數據、訂閱和手動操作 DOM 這些行為，皆是「副作用」（簡稱「effects」）。我們通常想副作用發生於 React 更新 DOM 之後，譬如把基於 state 的 DOM 手動操作放在 <code class=\\\"language-text\\\">componentDidMount</code> 和 <code class=\\\"language-text\\\">componentDidUpdate</code> 生命週期中，而這導致重複代碼。<code class=\\\"language-text\\\">useEffect</code> 此一 Hook，發揮並結合了 class 裏的各生命週期的用處，能在函式組件發生渲染之後執行副作用。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>副作用還能透過返回一個函式，以指定 React 於組件卸載時「清理」之：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h4>Effects 實踐貼士</h4>\\n<p>在一函式組件內結合調用多個 <code class=\\\"language-text\\\">useState</code> 和 <code class=\\\"language-text\\\">useEffect</code>，將無關的邏輯分離至多個代碼塊：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">,</span> setCount<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>isOnline<span class=\\\"token punctuation\\\">,</span> setIsOnline<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">useEffect</code> 在每次重渲染時都觸發的原因是：在 class 組件中，使用到 props 的副作用在 props 變動時會引致 bug，除非正確引入 <code class=\\\"language-text\\\">componentDidUpdate</code>（which is 一常見的 bug 來源）以監測 props。</p>\\n<p>為優化性能，可擇機取消重渲染後觸發 <code class=\\\"language-text\\\">useEffect</code>。不同於 <code class=\\\"language-text\\\">componentDidUpdate</code> 中比對 <code class=\\\"language-text\\\">prevProps</code> 參數和當前 props（或 <code class=\\\"language-text\\\">prevState</code> 和當前 state），<code class=\\\"language-text\\\">useEffect</code> 內建可選的第二個參數：包含 state 名的數組，於是僅在該 state 變化時才重跑 effect。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  document<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`You clicked </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\"> times`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>count<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unsubscribeFromFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>Hooks 之規則</h3>\\n<ul>\\n<li>只在<strong>頂層</strong>調用 Hooks。勿在循環、條件或嵌套函式內調用。</li>\\n<li>只在 React 函式組件內調用 Hooks。勿在常規 JavaScript 函式內調用（除了 custom Hooks，後文將述及）。</li>\\n</ul>\\n<p>官方提供一 <a href=\\\"https://www.npmjs.com/package/eslint-plugin-react-Hooks\\\">eslint-plugin-react-hooks</a> 來確保這些規則。</p>\\n<h3>Custom Hooks</h3>\\n<p>自訂 Hooks 讓你能復用富狀態邏輯，而不似 render props 和 HOC 那般徒增新組件。</p>\\n<p>將訂閱好友在線狀態的邏輯抽取出來成為一自訂 Hook：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>friendID<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>isOnline<span class=\\\"token punctuation\\\">,</span> setIsOnline<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleStatusChange</span><span class=\\\"token punctuation\\\">(</span>status<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setIsOnline</span><span class=\\\"token punctuation\\\">(</span>status<span class=\\\"token punctuation\\\">.</span>isOnline<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ChatAPI<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribeToFriendStatus</span><span class=\\\"token punctuation\\\">(</span>friendID<span class=\\\"token punctuation\\\">,</span> handleStatusChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* unsubscribe */</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> isOnline<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>然後就可在多個組件中使用之：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">FriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> isOnline <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isOnline <span class=\\\"token operator\\\">===</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'Loading...'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> isOnline <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'Online'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Offline'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">FriendListItem</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> isOnline <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useFriendStatus</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>li style<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> isOnline <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">'green'</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'black'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>props<span class=\\\"token punctuation\\\">.</span>friend<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>須知自訂 Hooks 只復用邏輯而非 state，調用者仍有完全孤立的 state。自訂 Hooks 更似一個自然流露的 convention 而非 feature，若一個函式以「<code class=\\\"language-text\\\">use</code>」冠名並其內部調用了其他 Hooks，則為一自訂 Hook。諸如表單處理、動畫、訂閱聲明、定時器等行為，皆可利用自訂 Hooks。</p>\\n<h3>其他 Hooks</h3>\\n<h4><code class=\\\"language-text\\\">useContext</code></h4>\\n<p>此 Hook 讓你毋須引入嵌套即可訂閱 React context：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> locale <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>LocaleContext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> theme <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>ThemeContext<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>開發者通常不樂意手動地在組件樹中層層傳遞回調函式。可以結合 <code class=\\\"language-text\\\">useReducer</code>（下文會述及）和 context 來往下傳遞一 <code class=\\\"language-text\\\">dispatch</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> TodosDispatch <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContext</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TodosApp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Tip: `dispatch` won't change between re-renders</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>todos<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>todosReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>TodosDispatch<span class=\\\"token punctuation\\\">.</span>Provider value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>dispatch<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>DeepTree todos<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>todos<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>TodosDispatch<span class=\\\"token punctuation\\\">.</span>Provider<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">TodosApp</code> 內的任意子裔都可以讀取使用 <code class=\\\"language-text\\\">dispatch</code> 函數並發起 actions 至 <code class=\\\"language-text\\\">TodosApp</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">DeepChild</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 從 context 處取用 dispatch 來執行 action</span>\\n  <span class=\\\"token keyword\\\">const</span> dispatch <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useContext</span><span class=\\\"token punctuation\\\">(</span>TodosDispatch<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'hello'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Add todo<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useReducer</code></h4>\\n<p>此 Hook 是 <code class=\\\"language-text\\\">useState</code> 的替代，可用一 reducer 管理複雜組件的本地 state。它接收一 reducer 和一可選的 <code class=\\\"language-text\\\">initialState</code>，返回當前 state 併以一 <code class=\\\"language-text\\\">dispatch</code> 方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'reset'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> initialState<span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> count<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Counter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> initialCount <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>state<span class=\\\"token punctuation\\\">,</span> dispatch<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useReducer</span><span class=\\\"token punctuation\\\">(</span>reducer<span class=\\\"token punctuation\\\">,</span> initialState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      Count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>state<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'reset'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        Reset\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">+</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'decrement'</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useMemo</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> memoizedValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">computeExpensiveValue</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>返回一個記憶化的（memoized）值。只會在輸入參數時發生改變時觸發重計算，避免每次渲染後的計算開銷。</p>\\n<p><code class=\\\"language-text\\\">useMemo</code> 甚至可用來跳過對子組件的重渲染：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Parent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">,</span> b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 僅當 `a` 變化時重渲染：</span>\\n  <span class=\\\"token keyword\\\">const</span> child1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>Child1 a<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 僅當 `b` 變化時重渲染：</span>\\n  <span class=\\\"token keyword\\\">const</span> child2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useMemo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">&lt;</span>Child2 b<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>b<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token punctuation\\\">{</span>child1<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">{</span>child2<span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">useCallback</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> memoizedCallback <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useCallback</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>返回一個記憶化的回調函式，它只會在輸入參數發生改變時觸發。引用比較的子組件會引致不必要的渲染，<code class=\\\"language-text\\\">useCallback</code> 即能用於優化此情境（類似 <code class=\\\"language-text\\\">shouldComponentUpdate</code>）。</p>\\n<h4><code class=\\\"language-text\\\">useRef</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">TextInputWithFocusButton</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> inputEl <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">onButtonClick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// `current` 指向加載的輸入框元素</span>\\n    inputEl<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>input ref<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>inputEl<span class=\\\"token punctuation\\\">}</span> type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"text\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span>button onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>onButtonClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>Focus the input<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>一個小技巧：<code class=\\\"language-text\\\">useRef</code> 可用以保存實例變量，因為「ref」對象是一個通用的容器，而其 <code class=\\\"language-text\\\">current</code> 成員是可變的（mutable）並能貯存任意值，類似 class 的實例變量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Timer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> intervalRef <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">useRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> id <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setInterval</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    intervalRef<span class=\\\"token punctuation\\\">.</span>current <span class=\\\"token operator\\\">=</span> id<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">handleCancelClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">clearInterval</span><span class=\\\"token punctuation\\\">(</span>intervalRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>完 :)</p>\",\"fields\":{\"tagSlugs\":[\"/tags/react/\",\"/tags/大前端/\"]},\"frontmatter\":{\"title\":\"重磅：React Hooks\",\"tags\":[\"React\",\"大前端\"],\"date\":\"2018-10-27T22:40:32.169Z\",\"description\":\"React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。本文詳盡地介紹了 Hooks 的誕生背景、使用方法與情境。\"}}},\"pathContext\":{\"slug\":\"/posts/react-hooks/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-react-hooks.json\n// module id = 409\n// module chunks = 13068826380790"],"sourceRoot":""}