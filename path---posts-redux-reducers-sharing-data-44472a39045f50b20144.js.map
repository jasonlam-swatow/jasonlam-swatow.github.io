{"version":3,"sources":["webpack:///path---posts-redux-reducers-sharing-data-44472a39045f50b20144.js","webpack:///./.cache/json/posts-redux-reducers-sharing-data.json"],"names":["webpackJsonp","415","module","exports","data","site","siteMetadata","title","subtitle","author","name","twitter","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,SAAA,UAAAC,QAAmDC,KAAA,YAAAC,QAAA,gBAA4CC,gBAAA,GAAAC,IAAA,8BAAyDC,gBAAmBC,GAAA,+IAAAC,KAAA,8nnBAA6gpBC,QAAgEC,UAAA,8BAAyCC,aAAgBZ,MAAA,yBAAAa,MAAA,eAAAC,KAAA,2BAAAC,YAAA,6FAAoMC,aAAgBC,KAAA","file":"path---posts-redux-reducers-sharing-data-44472a39045f50b20144.js","sourcesContent":["webpackJsonp([41061775892707],{\n\n/***/ 415:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"author\":{\"name\":\"Jason Lam\",\"twitter\":\"jasonlam0619\"},\"disqusShortname\":\"\",\"url\":\"https://lumen.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/mac/jasonlam-swatow.github.io/src/pages/articles/2018-11-07---Redux-Reducers-Sharing-Data/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>託 <code class=\\\"language-text\\\">combineReducers</code> 之福，我們可以把 state 分割成多個不同的片段，再合併成一新的 state 樹。但偶爾會遇到這麼一種情境：為了處理某些特殊的 actions，<code class=\\\"language-text\\\">sliceReducerA</code> 需要來自 <code class=\\\"language-text\\\">sliceReducerB</code> 的部分 state 數據，或 <code class=\\\"language-text\\\">sliceReducerB</code> 需要全部的 state 作為參數。<code class=\\\"language-text\\\">combineReducers</code> 無法解決這樣的需求。</p>\\n<h2>把所需數據作為額外參數傳遞予自定義函數</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">combinedReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"A_TYPICAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"SOME_SPECIAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 明確地把 state.b 作為额外參數傳遞</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>        \\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"ANOTHER_SPECIAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token comment\\\">// 明確地把全部 state 作為额外參數傳遞</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>         \\n    <span class=\\\"token punctuation\\\">}</span>    \\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>此中無深意，就不贅言了。</p>\\n<h2>給 Action 添加額外數據</h2>\\n<p>可以透過 thunk 函數或類似方法，為 action 添加額外數據：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">someSpecialActionCreator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>dispatch<span class=\\\"token punctuation\\\">,</span> getState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> dataFromB <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">selectDataFromB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SOME_SPECIAL_ACTION'</span><span class=\\\"token punctuation\\\">,</span>\\n      payload<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> dataFromB <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如此 B 的數據已存在於 action 中，故其父級 reducer 就可直接把數據暴露給 <code class=\\\"language-text\\\">sliceReducerA</code>。</p>\\n<h2>新加一 Reducer 用以處理多塊數據交叉</h2>\\n<p><code class=\\\"language-text\\\">combineReducers</code> 依舊負責組合 reducers 這種簡單場景，再新加一 reducer 來處理多塊數據交叉的複雜場景。最後使用一包裹函數依次調用此二類 reducers 並輸出最終結果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> combinedReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combineReducers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> sliceReducerA<span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> sliceReducerB\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">crossSliceReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'SOME_SPECIAL_ACTION'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 明確地把 state.b 作為额外參數傳遞</span>\\n        a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">handleSpecialCaseForA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> intermediateState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combinedReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> finalState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">crossSliceReducer</span><span class=\\\"token punctuation\\\">(</span>intermediateState<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> finalState<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>使用 reduce-reducers</h2>\\n<p>已有一庫 <a href=\\\"https://github.com/acdlite/reduce-reducers\\\">reduce-reducers</a> 可簡化上述流程（指 <a href=\\\"##%E6%96%B0%E5%8A%A0%E4%B8%80-Reducer-%E7%94%A8%E4%BB%A5%E8%99%95%E7%90%86%E5%A4%9A%E5%A1%8A%E6%95%B8%E6%93%9A%E4%BA%A4%E5%8F%89\\\">上一個解決方案</a>），並把產生的中間值依次傳遞給下一個 reducer：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 與上述手動編寫的 `rootReducer` 一樣</span>\\n<span class=\\\"token keyword\\\">const</span> rootReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">reduceReducers</span><span class=\\\"token punctuation\\\">(</span>combinedReducer<span class=\\\"token punctuation\\\">,</span> crossSliceReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>應注意，使用 <code class=\\\"language-text\\\">reduceReducers</code> 時須確保第一個 reducer 能夠定義初始的 state 數據，因為後續的 reducers 通常會假定 state 樹已存在，也就不會為此提供默認狀態。</p>\\n<h3>附：<code class=\\\"language-text\\\">reduceReducers</code> 與 <code class=\\\"language-text\\\">combineReducers</code> 之區別</h3>\\n<ul>\\n<li><code class=\\\"language-text\\\">combineReducers</code> 創建的是<strong>嵌套的</strong>狀態，每個 reducer 單獨負責其 state 塊（如 state.todos 與 state.users）</li>\\n<li><code class=\\\"language-text\\\">reduceReducers</code> 創建的是<strong>扁平的</strong>狀態，每個 reducer 都負責同一 state，尤適用於把數個操作同一 state 的 reducers 給 chain 起來。</li>\\n</ul>\\n<p>考慮以下簡單的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 此 reducer 為 state.sum 加上一 payload，</span>\\n<span class=\\\"token comment\\\">// 並紀錄操作總次數</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducerAdd</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>state<span class=\\\"token punctuation\\\">)</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> sum<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> totalOperations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n    sum<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>sum <span class=\\\"token operator\\\">+</span> payload<span class=\\\"token punctuation\\\">,</span>\\n    totalOperations<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>totalOperations <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 此 reducer 為 state.product 乘以一 payload，</span>\\n<span class=\\\"token comment\\\">// 並紀錄操作總次數</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducerMult</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>state<span class=\\\"token punctuation\\\">)</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> product<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> totalOperations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 因為 `reduceReducers` 本身之隱患，</span>\\n  <span class=\\\"token comment\\\">// `product` 可以是 undefined（下文會述及）</span>\\n  <span class=\\\"token keyword\\\">const</span> prev <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span>product <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n    product<span class=\\\"token punctuation\\\">:</span> prev <span class=\\\"token operator\\\">*</span> payload<span class=\\\"token punctuation\\\">,</span>\\n    totalOperations<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>totalOperations <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">combineReducers</code></h4>\\n<p>每個 reducer 均得到一獨立的 state 塊（見 <a href=\\\"http://redux.js.org/docs/api/combineReducers.html\\\">文檔</a>）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> rootReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combineReducers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  add<span class=\\\"token punctuation\\\">:</span> reducerAdd<span class=\\\"token punctuation\\\">,</span>\\n  mult<span class=\\\"token punctuation\\\">:</span> reducerMult\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 0, totalOperations: 0 },\\n *   mult: { product: 1, totalOperations: 0 },\\n * }\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> first <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>initialState<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 4, totalOperations: 1 },\\n *   mult: { product: 4, totalOperations: 1 },\\n * }\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> second <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 8, totalOperations: 2 },\\n *   mult: { product: 16, totalOperations: 2 },\\n * }\\n */</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">reduceReducers</code></h4>\\n<p>所有 reducers 都共享同一 state：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> addAndMult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">reduceReducers</span><span class=\\\"token punctuation\\\">(</span>reducerAdd<span class=\\\"token punctuation\\\">,</span> reducerMult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initial <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 0,\\n *   totalOperations: 0\\n * }\\n *\\n * 首先調用 `reducerAdd`，得到初始狀態 { sum: 0 }\\n * 然後調用 `reducerMult`，但沒有 payload，\\n * 故祇得到不變的 state，\\n * 而不見 `product` 屬性\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> next <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>initial<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 4,\\n *   product: 4,\\n *   totalOperations: 2\\n * }\\n *\\n * 首先調用 `reducerAdd`，得到 `sum` = 0 + 4 = 4\\n * 然後調用 `reducerMult`，得到 `product` = 1 * 4 = 4\\n * 二 reducers 都改變 `totalOperations`\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> final <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 8,\\n *   product: 16,\\n *   totalOperations: 4\\n * }\\n */</span></code></pre>\\n      </div>\\n<p>完 :)</p>\",\"fields\":{\"tagSlugs\":[\"/tags/react/\",\"/tags/大前端/\"]},\"frontmatter\":{\"title\":\"Redux Reducers 如何共享數據？\",\"tags\":[\"React\",\"大前端\"],\"date\":\"2018-11-07T22:40:32.169Z\",\"description\":\"Redux 中若有不同片段的 state，可交由 combineReducers 工具函數委託更新並合併。但它解決不了不同 reducers 間共享 state 數據的問題。\"}}},\"pathContext\":{\"slug\":\"/posts/redux-reducers-sharing-data\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-redux-reducers-sharing-data-44472a39045f50b20144.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"author\":{\"name\":\"Jason Lam\",\"twitter\":\"jasonlam0619\"},\"disqusShortname\":\"\",\"url\":\"https://lumen.netlify.com\"}},\"markdownRemark\":{\"id\":\"/Users/mac/jasonlam-swatow.github.io/src/pages/articles/2018-11-07---Redux-Reducers-Sharing-Data/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>託 <code class=\\\"language-text\\\">combineReducers</code> 之福，我們可以把 state 分割成多個不同的片段，再合併成一新的 state 樹。但偶爾會遇到這麼一種情境：為了處理某些特殊的 actions，<code class=\\\"language-text\\\">sliceReducerA</code> 需要來自 <code class=\\\"language-text\\\">sliceReducerB</code> 的部分 state 數據，或 <code class=\\\"language-text\\\">sliceReducerB</code> 需要全部的 state 作為參數。<code class=\\\"language-text\\\">combineReducers</code> 無法解決這樣的需求。</p>\\n<h2>把所需數據作為額外參數傳遞予自定義函數</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">combinedReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"A_TYPICAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"SOME_SPECIAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 明確地把 state.b 作為额外參數傳遞</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>        \\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">\\\"ANOTHER_SPECIAL_ACTION\\\"</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        a <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token comment\\\">// 明確地把全部 state 作為额外參數傳遞</span>\\n        b <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>         \\n    <span class=\\\"token punctuation\\\">}</span>    \\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>此中無深意，就不贅言了。</p>\\n<h2>給 Action 添加額外數據</h2>\\n<p>可以透過 thunk 函數或類似方法，為 action 添加額外數據：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">someSpecialActionCreator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>dispatch<span class=\\\"token punctuation\\\">,</span> getState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> dataFromB <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">selectDataFromB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'SOME_SPECIAL_ACTION'</span><span class=\\\"token punctuation\\\">,</span>\\n      payload<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> dataFromB <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>如此 B 的數據已存在於 action 中，故其父級 reducer 就可直接把數據暴露給 <code class=\\\"language-text\\\">sliceReducerA</code>。</p>\\n<h2>新加一 Reducer 用以處理多塊數據交叉</h2>\\n<p><code class=\\\"language-text\\\">combineReducers</code> 依舊負責組合 reducers 這種簡單場景，再新加一 reducer 來處理多塊數據交叉的複雜場景。最後使用一包裹函數依次調用此二類 reducers 並輸出最終結果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> combinedReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combineReducers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> sliceReducerA<span class=\\\"token punctuation\\\">,</span>\\n  b<span class=\\\"token punctuation\\\">:</span> sliceReducerB\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">crossSliceReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">switch</span><span class=\\\"token punctuation\\\">(</span>action<span class=\\\"token punctuation\\\">.</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'SOME_SPECIAL_ACTION'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 明確地把 state.b 作為额外參數傳遞</span>\\n        a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">handleSpecialCaseForA</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">,</span> state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">sliceReducerB</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> intermediateState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combinedReducer</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> finalState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">crossSliceReducer</span><span class=\\\"token punctuation\\\">(</span>intermediateState<span class=\\\"token punctuation\\\">,</span> action<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> finalState<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2>使用 reduce-reducers</h2>\\n<p>已有一庫 <a href=\\\"https://github.com/acdlite/reduce-reducers\\\">reduce-reducers</a> 可簡化上述流程（指 <a href=\\\"##%E6%96%B0%E5%8A%A0%E4%B8%80-Reducer-%E7%94%A8%E4%BB%A5%E8%99%95%E7%90%86%E5%A4%9A%E5%A1%8A%E6%95%B8%E6%93%9A%E4%BA%A4%E5%8F%89\\\">上一個解決方案</a>），並把產生的中間值依次傳遞給下一個 reducer：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 與上述手動編寫的 `rootReducer` 一樣</span>\\n<span class=\\\"token keyword\\\">const</span> rootReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">reduceReducers</span><span class=\\\"token punctuation\\\">(</span>combinedReducer<span class=\\\"token punctuation\\\">,</span> crossSliceReducer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>應注意，使用 <code class=\\\"language-text\\\">reduceReducers</code> 時須確保第一個 reducer 能夠定義初始的 state 數據，因為後續的 reducers 通常會假定 state 樹已存在，也就不會為此提供默認狀態。</p>\\n<h3>附：<code class=\\\"language-text\\\">reduceReducers</code> 與 <code class=\\\"language-text\\\">combineReducers</code> 之區別</h3>\\n<ul>\\n<li><code class=\\\"language-text\\\">combineReducers</code> 創建的是<strong>嵌套的</strong>狀態，每個 reducer 單獨負責其 state 塊（如 state.todos 與 state.users）</li>\\n<li><code class=\\\"language-text\\\">reduceReducers</code> 創建的是<strong>扁平的</strong>狀態，每個 reducer 都負責同一 state，尤適用於把數個操作同一 state 的 reducers 給 chain 起來。</li>\\n</ul>\\n<p>考慮以下簡單的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 此 reducer 為 state.sum 加上一 payload，</span>\\n<span class=\\\"token comment\\\">// 並紀錄操作總次數</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducerAdd</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>state<span class=\\\"token punctuation\\\">)</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> sum<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> totalOperations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n    sum<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>sum <span class=\\\"token operator\\\">+</span> payload<span class=\\\"token punctuation\\\">,</span>\\n    totalOperations<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>totalOperations <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 此 reducer 為 state.product 乘以一 payload，</span>\\n<span class=\\\"token comment\\\">// 並紀錄操作總次數</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">reducerMult</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>state<span class=\\\"token punctuation\\\">)</span> state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> product<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> totalOperations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>payload<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 因為 `reduceReducers` 本身之隱患，</span>\\n  <span class=\\\"token comment\\\">// `product` 可以是 undefined（下文會述及）</span>\\n  <span class=\\\"token keyword\\\">const</span> prev <span class=\\\"token operator\\\">=</span> state<span class=\\\"token punctuation\\\">.</span>product <span class=\\\"token operator\\\">||</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">...</span>state<span class=\\\"token punctuation\\\">,</span>\\n    product<span class=\\\"token punctuation\\\">:</span> prev <span class=\\\"token operator\\\">*</span> payload<span class=\\\"token punctuation\\\">,</span>\\n    totalOperations<span class=\\\"token punctuation\\\">:</span> state<span class=\\\"token punctuation\\\">.</span>totalOperations <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">combineReducers</code></h4>\\n<p>每個 reducer 均得到一獨立的 state 塊（見 <a href=\\\"http://redux.js.org/docs/api/combineReducers.html\\\">文檔</a>）：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> rootReducer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">combineReducers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  add<span class=\\\"token punctuation\\\">:</span> reducerAdd<span class=\\\"token punctuation\\\">,</span>\\n  mult<span class=\\\"token punctuation\\\">:</span> reducerMult\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initialState <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 0, totalOperations: 0 },\\n *   mult: { product: 1, totalOperations: 0 },\\n * }\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> first <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>initialState<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 4, totalOperations: 1 },\\n *   mult: { product: 4, totalOperations: 1 },\\n * }\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> second <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">rootReducer</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/*\\n * {\\n *   add:  { sum: 8, totalOperations: 2 },\\n *   mult: { product: 16, totalOperations: 2 },\\n * }\\n */</span></code></pre>\\n      </div>\\n<h4><code class=\\\"language-text\\\">reduceReducers</code></h4>\\n<p>所有 reducers 都共享同一 state：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> addAndMult <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">reduceReducers</span><span class=\\\"token punctuation\\\">(</span>reducerAdd<span class=\\\"token punctuation\\\">,</span> reducerMult<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> initial <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 0,\\n *   totalOperations: 0\\n * }\\n *\\n * 首先調用 `reducerAdd`，得到初始狀態 { sum: 0 }\\n * 然後調用 `reducerMult`，但沒有 payload，\\n * 故祇得到不變的 state，\\n * 而不見 `product` 屬性\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> next <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>initial<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 4,\\n *   product: 4,\\n *   totalOperations: 2\\n * }\\n *\\n * 首先調用 `reducerAdd`，得到 `sum` = 0 + 4 = 4\\n * 然後調用 `reducerMult`，得到 `product` = 1 * 4 = 4\\n * 二 reducers 都改變 `totalOperations`\\n */</span>\\n\\n<span class=\\\"token keyword\\\">const</span> final <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">addAndMult</span><span class=\\\"token punctuation\\\">(</span>next<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">/* \\n * {\\n *   sum: 8,\\n *   product: 16,\\n *   totalOperations: 4\\n * }\\n */</span></code></pre>\\n      </div>\\n<p>完 :)</p>\",\"fields\":{\"tagSlugs\":[\"/tags/react/\",\"/tags/大前端/\"]},\"frontmatter\":{\"title\":\"Redux Reducers 如何共享數據？\",\"tags\":[\"React\",\"大前端\"],\"date\":\"2018-11-07T22:40:32.169Z\",\"description\":\"Redux 中若有不同片段的 state，可交由 combineReducers 工具函數委託更新並合併。但它解決不了不同 reducers 間共享 state 數據的問題。\"}}},\"pathContext\":{\"slug\":\"/posts/redux-reducers-sharing-data\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-redux-reducers-sharing-data.json\n// module id = 415\n// module chunks = 41061775892707"],"sourceRoot":""}