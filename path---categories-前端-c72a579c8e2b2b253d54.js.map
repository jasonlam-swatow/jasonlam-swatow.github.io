{"version":3,"sources":["webpack:///path---categories-前端-c72a579c8e2b2b253d54.js","webpack:///./.cache/json/categories-前端.json"],"names":["webpackJsonp","400","module","exports","data","site","siteMetadata","title","subtitle","copyright","menu","label","path","author","name","email","twitter","github","zhihu","rss","allMarkdownRemark","edges","node","fields","slug","categorySlug","frontmatter","date","category","description","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,YAAAC,SAAA,UAAAC,UAAA,SAAAC,OAAuEC,MAAA,KAAAC,KAAA,MAA0BD,MAAA,MAAAC,KAAA,YAAiCD,MAAA,KAAAC,KAAA,cAAgCC,QAAYC,KAAA,YAAAC,MAAA,yBAAAC,QAAA,eAAAC,OAAA,kBAAAC,MAAA,yDAAAC,IAAA,OAAqLC,mBAAsBC,QAAUC,MAAQC,QAAUC,KAAA,qCAAAC,aAAA,mBAA6EC,aAAgBnB,MAAA,yBAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,8FAA+LP,MAAQC,QAAUC,KAAA,kCAAAC,aAAA,mBAA0EC,aAAgBnB,MAAA,eAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,qFAA4KP,MAAQC,QAAUC,KAAA,sBAAAC,aAAA,mBAA8DC,aAAgBnB,MAAA,iBAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,6EAAsKP,MAAQC,QAAUC,KAAA,8BAAAC,aAAA,mBAAsEC,aAAgBnB,MAAA,eAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,4CAAmIP,MAAQC,QAAUC,KAAA,wBAAAC,aAAA,mBAAgEC,aAAgBnB,MAAA,uBAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,6HAA4NP,MAAQC,QAAUC,KAAA,kCAAAC,aAAA,mBAA0EC,aAAgBnB,MAAA,8BAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,kFAAwLP,MAAQC,QAAUC,KAAA,oCAAAC,aAAA,mBAA4EC,aAAgBnB,MAAA,6BAAAoB,KAAA,2BAAAC,SAAA,KAAAC,YAAA,8GAAkNC,aAAgBF,SAAA","file":"path---categories-前端-c72a579c8e2b2b253d54.js","sourcesContent":["webpackJsonp([167063060281427],{\n\n/***/ 400:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"copyright\":\"© 原創版權\",\"menu\":[{\"label\":\"文章\",\"path\":\"/\"},{\"label\":\"關於我\",\"path\":\"/about/\"},{\"label\":\"聯繫\",\"path\":\"/contact/\"}],\"author\":{\"name\":\"Jason Lam\",\"email\":\"jasonlam0619@gmail.com\",\"twitter\":\"jasonlam0619\",\"github\":\"jasonlam-swatow\",\"zhihu\":\"https://www.zhihu.com/people/lin-jia-jun-57/activities\",\"rss\":\"#\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/redux-reducers-sharing-data\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"Redux Reducers 如何共享數據？\",\"date\":\"2018-11-07T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"Redux 中若有不同片段的 state，可交由 combineReducers 工具函數委託更新並合併。但它解決不了不同 reducers 間共享 state 數據的問題。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/using-map-for-conditions\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"使用 Map 作條件判斷\",\"date\":\"2018-11-06T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"JavaScript 通常使用 if/else、switch 作條件判斷，它們雖然全能，惟實現臃腫。其實 ES2015 的 Map 亦能用於複雜的條件判斷。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-hooks/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"重磅：React Hooks\",\"date\":\"2018-10-27T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。本文詳盡地介紹了 Hooks 的誕生背景、使用方法與情境。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-state-patterns\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"React 狀態管理模式\",\"date\":\"2018-09-01T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"如果你的 React 應用沒有用上恰當的狀態管理模式，開發會變得非常辛苦。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/derived-state/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"你可能不需要 Derived State\",\"date\":\"2018-07-27T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"componentWillReceiveProps、getDerivedStateFromProps 均是用於因應 props 變化以更新狀態，且不導致額外渲染的生命週期。但二者經常因誤用而引致 bug。本文旨在解釋其使用場景及反模式。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/macrotask-and-microtask/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"事件循環之 Macrotask & Microtask\",\"date\":\"2018-06-01T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"JavaScript 的事件循環（Event Loop）中，macrotask 和 microtask 同屬於異步任務。二者有什麼區別？何時使用何者？\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-redux-and-immutable/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"react-redux 與 Immutable 優化\",\"date\":\"2016-09-01T23:46:37.121Z\",\"category\":\"前端\",\"description\":\"使用 react-redux 時，確保你熟悉它在更新和賦值時所做的操作，以及 immutable、side effects 和 mutation 的概念，以防止意外的 mutation 降低了應用性能。\"}}}]}},\"pathContext\":{\"category\":\"前端\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---categories-前端-c72a579c8e2b2b253d54.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Jason Lam\",\"subtitle\":\"慎獨｜純亦不已\",\"copyright\":\"© 原創版權\",\"menu\":[{\"label\":\"文章\",\"path\":\"/\"},{\"label\":\"關於我\",\"path\":\"/about/\"},{\"label\":\"聯繫\",\"path\":\"/contact/\"}],\"author\":{\"name\":\"Jason Lam\",\"email\":\"jasonlam0619@gmail.com\",\"twitter\":\"jasonlam0619\",\"github\":\"jasonlam-swatow\",\"zhihu\":\"https://www.zhihu.com/people/lin-jia-jun-57/activities\",\"rss\":\"#\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/redux-reducers-sharing-data\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"Redux Reducers 如何共享數據？\",\"date\":\"2018-11-07T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"Redux 中若有不同片段的 state，可交由 combineReducers 工具函數委託更新並合併。但它解決不了不同 reducers 間共享 state 數據的問題。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/using-map-for-conditions\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"使用 Map 作條件判斷\",\"date\":\"2018-11-06T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"JavaScript 通常使用 if/else、switch 作條件判斷，它們雖然全能，惟實現臃腫。其實 ES2015 的 Map 亦能用於複雜的條件判斷。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-hooks/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"重磅：React Hooks\",\"date\":\"2018-10-27T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"React v16.7.0-alpha 後引入了「Hooks」此一向後兼容之概念。本文詳盡地介紹了 Hooks 的誕生背景、使用方法與情境。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-state-patterns\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"React 狀態管理模式\",\"date\":\"2018-09-01T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"如果你的 React 應用沒有用上恰當的狀態管理模式，開發會變得非常辛苦。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/derived-state/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"你可能不需要 Derived State\",\"date\":\"2018-07-27T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"componentWillReceiveProps、getDerivedStateFromProps 均是用於因應 props 變化以更新狀態，且不導致額外渲染的生命週期。但二者經常因誤用而引致 bug。本文旨在解釋其使用場景及反模式。\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/macrotask-and-microtask/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"事件循環之 Macrotask & Microtask\",\"date\":\"2018-06-01T22:40:32.169Z\",\"category\":\"前端\",\"description\":\"JavaScript 的事件循環（Event Loop）中，macrotask 和 microtask 同屬於異步任務。二者有什麼區別？何時使用何者？\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/react-redux-and-immutable/\",\"categorySlug\":\"/categories/前端/\"},\"frontmatter\":{\"title\":\"react-redux 與 Immutable 優化\",\"date\":\"2016-09-01T23:46:37.121Z\",\"category\":\"前端\",\"description\":\"使用 react-redux 時，確保你熟悉它在更新和賦值時所做的操作，以及 immutable、side effects 和 mutation 的概念，以防止意外的 mutation 降低了應用性能。\"}}}]}},\"pathContext\":{\"category\":\"前端\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/categories-前端.json\n// module id = 400\n// module chunks = 167063060281427"],"sourceRoot":""}